import Link from "next/link";
import styles from "../../styles/Home.module.css";
import Grid from "@mui/material/Unstable_Grid2";
import Head from "next/head";
import range from "lodash/range";
import padStart from "lodash/padStart";
import Stack from "@mui/material/Stack";
import Typography from "@mui/material/Typography";
import capitalize from "lodash/capitalize";
import Image from "next/image";
import Chip from "@mui/material/Chip";
import replace from "lodash/replace";
import Button from "@mui/material/Button";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";

export default function Pokedex({ pokemonJSON, speciesJSON }) {
  const typeButtons = pokemonJSON.types.map((thisType) => {
    return (
      <Chip
        key={thisType.type.name}
        label={capitalize(thisType.type.name)}
        className={styles["chip-info"]}
        color="success"
        size="large"
      ></Chip>
    );
  });

  let flavorText = "'No description found'";
  const pokeFlavor = speciesJSON.flavor_text_entries;

  for (const entry of pokeFlavor) {
    if (entry.language.name === "en") {
      flavorText = replace(entry.flavor_text, "\f", " ");
      break;
    }
  }

  let imgRoute = "/404.png";
  let imgDimensions = { width: 1000, height: 492 };
  if (pokemonJSON.sprites.front_default) {
    imgRoute = pokemonJSON.sprites.front_default;
    imgDimensions = { width: 100, height: 100 };
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>PokeDex</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/pokemon.ico" />
      </Head>
      <div className={styles["pokegrid-header"]}>
        <div>PokeDex</div>
      </div>

      <Grid container columns={12} className={styles.pokedex}>
        <Grid
          sm={12}
          display="flex"
          justifyContent="center"
          alignItems="center"
        >
          <Typography variant="h3" gutterBottom>
            {`${capitalize(pokemonJSON.name)} N.ยบ ${padStart(
              pokemonJSON.id,
              3,
              "0"
            )}`}
          </Typography>
        </Grid>

        <Grid sm={12} container justifyContent="center" columnGap={"40px"}>
          <Grid sm={3} sx={{ minHeight: 200, minWidth: 200 }}>
            <Image
              src={imgRoute}
              alt="pokeImg"
              layout="responsive"
              width={imgDimensions.width}
              height={imgDimensions.height}
            />
          </Grid>
          <Grid sm={5} container alignItems={"center"}>
            <Grid sm={12}>
              <Typography variant="h5" gutterBottom>
                Description
              </Typography>
              <Typography variant="h6">{flavorText}</Typography>
            </Grid>
            <Grid xs={12} sm={12}>
              <Typography variant="h5" gutterBottom>
                Type
              </Typography>
              {typeButtons}
            </Grid>
            <Grid
              xs={12}
              sm={12}
              container
              justifyContent={"flex-start"}
              columnGap={"40%"}
            >
              <Grid>
                <Typography variant="h5">Height</Typography>
                <Typography variant="h6">
                  <Chip
                    key="height"
                    label={`${pokemonJSON.height / 10} m`}
                    className={styles["chip-info"]}
                    color="primary"
                    size="large"
                  />
                </Typography>
              </Grid>
              <Grid>
                <Typography variant="h5">Weight</Typography>

                <Chip
                  key="weight"
                  label={`${pokemonJSON.weight / 10} kg`}
                  className={styles["chip-info"]}
                  color="primary"
                  size="large"
                />
              </Grid>
            </Grid>
          </Grid>
        </Grid>
      </Grid>

      <Stack alignItems="center" sx={{ marginBottom: "2rem" }}>
        <Link href="/pokegrid/page/1">
          <Button
            variant="contained"
            size="large"
            startIcon={<ArrowBackIcon />}
            className={styles["back-btn"]}
            sx={{
              "& .MuiSvgIcon-root": {
                fontSize: "30px !important",
              },
            }}
          >
            Back to Pokegrid
          </Button>
        </Link>
      </Stack>
    </div>
  );
}

export async function getStaticPaths() {
  const res = await fetch("https://pokeapi.co/api/v2/pokemon/");
  const pokemonJSON = await res.json();
  const count = pokemonJSON.count;
  const paths = range(1, count + 1).map((thisPage) => ({
    params: { id: thisPage.toString() },
  }));

  return {
    paths,
    fallback: false,
  };
}

export async function getStaticProps({ params }) {
  const pokeId = params.id;
  const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${pokeId}`);
  const pokemonJSON = await res.json();

  const res2 = await fetch(
    `https://pokeapi.co/api/v2/pokemon-species/${pokeId}`
  );
  const speciesJSON = await res2.json();

  return {
    props: {
      pokemonJSON,
      speciesJSON,
    },
  };
}
